struct Attribute
{
    var name:String
    var type:String
    init(name:String = "",type:String = "")
    {
        self.name = name
        self.type = type
    }
}
struct Function
{
    var name:String
    var body:String
    var type:String
    var parameters:[Attribute]=[]
    init(name:String = "",type:String = "",body:String="",parameters:[Attribute] = [])
    {
        self.name = name
        self.body = body
        self.type = type
        self.parameters = parameters
    }
}

struct ClassAndExpansion
{   
    var isClass:Bool = true
    var name:String = ""
    var inherits:[String] = []
    var funcArr:[Function] = []
    var attributes:[Attribute] = []
    init(name:String,isClass:Bool = true,
         inherits:[String] = [],attributes:[Attribute] = [],funcArr:[Function] = [])
    {
      self.isClass = isClass 
      self.name = name
      self.inherits = inherits
      self.funcArr = funcArr
      self.attributes = attributes
    }
}
func contains(_ arr:[Character],_ ch:Character)->Bool
{
    for i:Character in arr
    {
        if i == ch
        {
            return true
        }
    }
    return false
}
func skipSymbol(file:String,i:Int,till:[Character])->(str:String,i:Int,ch:Character)
{
    var str:String = ""
    var j:Int = 0
    var ch:Character = " "
    repeat
                   {
                       ch = file[file.index(file.startIndex, offsetBy: i + j)]
                       str.insert(ch, at: str.endIndex)
                       j+=1
                   }
    while (i + j < file.characters.count && !contains(till,ch))
    if i + j  == file.characters.count
    {return ("/",-1,"1") }
    ch=str.remove(at: str.index(before: str.endIndex))
    return (str,i + j,ch)
    
}
func parse(file:String)->[ClassAndExpansion]
{
    var data:[ClassAndExpansion] = []
    var i = 0
    var tuple:(str:String,i:Int,ch:Character)
    var ch:Character = "d"
    tuple = skipSymbol(file:file,i:i,till:["$","+"])
      i = tuple.i
   while (tuple.i != -1) 
  {
      //var tuple1 = skipSymbol(file:file,i:i,till:[" "])
      //i = tuple1.i
               var name:String = "";
               var tuple2 = skipSymbol(file:file,i:i,till:[" ",":","-","+"])
               //i = tuple2.i
               var functions:[Function] = []
               var attributes:[Attribute] = []
     data.append(ClassAndExpansion(name:tuple2.str))
     tuple = skipSymbol(file:file,i:i,till:["$","+"])
      i = tuple.i
    }
    
  return data
}
print(parse(file:"+fvdfdf:hjh +dsvsdv " ))
